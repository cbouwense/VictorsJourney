<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update inversion count
draw_set_alpha(1);
draw_set_colour(c_white);
draw_set_font(fnt_chris);


// If Victor is running or idle and is upright
if ((obj_victor.sprite_index == spr_victor_run_dim1
        || obj_victor.sprite_index == spr_victor_run_dim2
        || obj_victor.sprite_index == spr_victor_idle_dim1
        || obj_victor.sprite_index == spr_victor_idle_dim2)
        &amp;&amp; obj_victor.image_yscale == 1) {
    if (obj_victor.inversions &gt;= 10) { // draw number more left because double digits are offset otherwise
        draw_x = obj_victor.x - 16;
    }
    else {
        draw_x = obj_victor.x - 8;
    }
    draw_y =  obj_victor.y - 90;
    angle = 0;
}
// If Victor is running or idle and is upside-down
else if ((obj_victor.sprite_index == spr_victor_run_dim1
        || obj_victor.sprite_index == spr_victor_run_dim2
        || obj_victor.sprite_index == spr_victor_idle_dim1
        || obj_victor.sprite_index == spr_victor_idle_dim2)
        &amp;&amp; obj_victor.image_yscale == -1) {
    if (obj_victor.inversions &gt;= 10) {
        draw_x = obj_victor.x;
    }
    else {
        draw_x = obj_victor.x + 8;
    }
    draw_y = obj_victor.y + 90;
    angle = 180;
}
// If Victor is in the air and is upside-down
else if ((obj_victor.sprite_index == spr_victor_air_dim1
        || obj_victor.sprite_index == spr_victor_air_dim2)
        &amp;&amp; obj_victor.image_yscale == -1) {
    if (obj_victor.inversions &gt;= 10) {
        draw_x = obj_victor.x;
    }
    else {
        draw_x = obj_victor.x + 8;
    }
    draw_y =  obj_victor.y + 60;
    angle = 180;
}
// If Victor is in the air and is right side up
else {
if (obj_victor.inversions &gt;= 10) { // draw number more left because double digits are offset otherwise
        draw_x = obj_victor.x - 16;
    }
    else {
        draw_x = obj_victor.x - 8;
    }
    draw_y =  obj_victor.y - 70;
    angle = 0;
}

if (obj_victor.visible) {
    draw_text_transformed(draw_x, draw_y, string(obj_victor.inversions), 1, 1, angle);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
